/**
 * Generate a Material Color Theme from an Image and then Apply it to the Root
 * @param {HTMLElement} image Target Image to pull the color from
 * @param {Array | Object} customColors Custom Colors to be added to theme
 * {
 * value: argb number, 
 * name: unique name, 
 * blend: boolean
 * }
 * @param {Array} applyThemeOptions Theme Options 
 * {
    dark?: boolean | undefined;
    target?: HTMLElement | undefined;
    brightnessSuffix?: boolean | undefined;
    paletteTones?: number[] | undefined;
} | undefined)
 */
async function generateAndApplyTheme(image, customColors, applyThemeOptions) {
  try {
    // Set the body's opacity to 0 before starting the theme generation process
    document.body.style.opacity = "0";

    // Optionally, you might want to ensure a repaint here in some browsers with a minimal timeout
    await new Promise((resolve) => setTimeout(resolve, 300)); // This timeout can be adjusted

    // Generate the theme from the image
    const theme = await themeFromImage(image, customColors);

    // Helper function to apply the custom Colors generated by applyTheme
    function applyCustomColorsTheme(theme, options) {
      const target = options?.target || document.body;
      const isDark = options?.dark ?? false;
      const scheme = isDark ? `dark` : `light`;
      // const customColorsKeyValuePairs = {};

      theme.customColors.forEach((customColor) => {
        // Get the color name
        const colorName = customColor.color.name;

        [`${scheme}`].forEach((shade) => {
          Object.keys(customColor[shade]).forEach((key) => {
            const token = key.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
            const colorValue = hexFromArgb(customColor[shade][key]);
            target.style.setProperty(
              `--md-sys-color-custom-${colorName}-${token}`,
              colorValue
            );
          });
        });

        target.style.setProperty(
          `--md-sys-color-custom-${colorName}-value`,
          hexFromArgb(customColor.value)
        );
      });
    }

    // Apply the generated theme
    applyTheme(theme, applyThemeOptions);
    applyCustomColorsTheme(theme, applyThemeOptions);

    // After the theme is applied, change the opacity of the body back to 1
    document.body.style.opacity = "1";
  } catch (error) {
    console.error("Error generating or applying theme:", error);

    // Optionally handle errors further, e.g., provide a fallback theme or UI indication

    // You might want to reset the opacity if the image fails to load
    document.body.style.opacity = "1";
  }
}
